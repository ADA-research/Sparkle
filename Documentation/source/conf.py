# -*- coding: utf-8 -*-
#
"""Configuration file for the Sphinx documentation builder."""
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
from __future__ import annotations
import os
import sys

from pygments.lexer import bygroups
from pygments.token import Whitespace, Keyword, Name
import pygments
from pygments.lexers.shell import BashLexer
from pygments.formatters.terminal import TerminalFormatter

import sparkle.CLI
from sparkle.CLI.cli import commands

# Add path to sparkle root
sys.path.append(os.path.abspath("../../sparkle"))
sys.path.append(os.path.abspath("../../sparkle/CLI"))
print("sys.path: ", sys.path)

import sparkle  # noqa: E402

# -- Project information -----------------------------------------------------

project = "Sparkle"
copyright = "2024, ADA Research Group, AIM @ RWTH Aachen"
author = "ADA Research Group, AIM @ RWTH Aachen"

# The short X.Y version
version = sparkle.about.version
# The full version, including alpha/beta/rc tags
release = sparkle.about.version


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = "1.0"

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named "sphinx.ext.*") or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.doctest",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.ifconfig",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinxcontrib.autoprogram",
    "sphinx.ext.autodoc",
    "sphinx_copybutton",
    "myst_parser",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = [".md"]

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en-gb"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "colorful"


class SparkleBashLexer(BashLexer):
    """Extended BashLexer to add sparkle keywords."""
    def __init__(self: SparkleBashLexer, **options: any) -> None:
        """Initialize the BashLexer and extend."""
        super().__init__(**options)
        self.tokens["basic"][0] =\
            (r"\b(if|fi|else|while|in|do|done|for|then|return|function|case|"
             r"select|break|continue|until|esac|elif|sparkle)(\s*)\b",
             bygroups(Keyword, Whitespace))
        command_str = "|".join(commands())
        self.tokens["basic"][1] =\
            (r"\b(alias|bg|bind|builtin|caller|cd|command|compgen|"
             r"complete|declare|dirs|disown|echo|enable|eval|exec|exit|"
             r"export|false|fc|fg|getopts|hash|help|history|jobs|kill|let|"
             r"local|logout|popd|printf|pushd|pwd|read|readonly|set|shift|"
             r"shopt|source|suspend|test|time|times|trap|true|type|typeset|"
             r"ulimit|umask|unalias|unset|wait|"
             f"{command_str}"
             r")(?=[\s)`])",
             Name.Builtin)


pygments.highlight(code="bash", lexer=SparkleBashLexer(), formatter=TerminalFormatter())

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_logo = "sparkle_logo.png"
html_favicon = "sparkle_favicon.ico"
html_theme_options = {
    "navigation_depth": 3,  # Adjust the depth as needed
}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["custom.css"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don"t match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``["localtoc.html", "relations.html", "sourcelink.html",
# "searchbox.html"]``.
#
# html_sidebars = {}

html_sidebars = {
    "**": [
        "globaltoc.html",  # Table of contents
        "relations.html",  # Prev/Next links
        "sourcelink.html",  # View page source link
        "searchbox.html",  # Search box
    ]
}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "sparkledoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ("letterpaper" or "a4paper").
    #
    # "papersize": "letterpaper",

    # The font size ("10pt", "11pt" or "12pt").
    #
    # "pointsize": "10pt",

    # Additional stuff for the LaTeX preamble.
    #
    # "preamble": "",

    # Latex figure (float) alignment
    #
    # "figure_align": "htbp",
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "sparkle.tex", "Sparkle Documentation",
     "ADA Research Group, AIM @ RWTH Aachen", "manual"),
]

# Manually installed sty files not easily available from conda
# Note that although texlive-core is available from conda (containing at least some
# packages), it can cause conflicts with exiting texlive installations.
latex_additional_files = ["tex_sty/fncychap.sty", "tex_sty/wrapfig.sty",
                          "tex_sty/capt-of.sty", "tex_sty/framed.sty",
                          "tex_sty/upquote.sty", "tex_sty/needspace.sty",
                          "tex_sty/tabulary.sty", "tex_sty/titlesec.sty"]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "sparkle", "Sparkle Documentation",
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, "sparkle", "sparkle Documentation",
     author, "sparkle", " A PbO-based Multi-agent Problem-solving Platform.",
     "Miscellaneous"),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ""

# A unique identification for the text.
#
# epub_uid = ""

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------

# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True
