### IRACE Parameter Configuration Space file generated by Sparkle
# Parameter Name          switch                         type    values           [conditions (using R syntax)]                                             comments
init_solution             "--init_solution "             c       (1,2)                                                                                      # #decide which solution initialisation function would be used (1 means random assignment, and 2 means assigning True to all variables if #all_pos_lit>#all_neg_lit and assigning False to all variables if #all_pos_lit<=#all_neg_lit)
perform_aspiration        "--perform_aspiration "        c       (0,1)                                                                                      # #decide wehter the aspiration heuristic would be activated (0 means not activate, and 1 means activate)
perform_clause_weight     "--perform_clause_weight "     c       (0,1)                                                                                      # #decide whether the clause weight scheme would be activated (0 means not activated, and 1 means activated)
perform_double_cc         "--perform_double_cc "         c       (0,1)                                                                                      # #decide whether the double configuration checking heuristic would be activated (0 means not activate, and 1 means activate)
perform_first_div         "--perform_first_div "         c       (0,1)                                                                                      # #decide whether the first diversification would be activated (0 means not activate, and 1 means activate)
perform_pac               "--perform_pac "               c       (0,1)                                                                                      # #decide whether PAC heuristic would be activated (0 means not activate, and 1 means activate)
sel_clause_div            "--sel_clause_div "            c       (1,2)                                                                                      # #decide which unsat clause selection strategy in the last diversification (1 means the random selection, and 2 means clause weight based probability distribution)
sel_var_break_tie_greedy  "--sel_var_break_tie_greedy "  c       (1,2,3,4)                                                                                  # #decide which breaking tie mechanism would be used in the greedy mode, including CSCC, NVCC and aspiration heuristics (1 means randomly choose, 2 means choose a variable with greatest age, 3 means choose a variable with greatest hscore, and 4 means choose a variable with greatest hscore2)
sel_var_div               "--sel_var_div "               c       (1,2,3,4,5,6,7)                                                                            # #decide which variable selection strategy in the last diversification (1 means randomly choose a variable in the selected clause, 2 means choose a variable with greatest age in the selected clause, 3 means choose a variable with greatest score in the selected clause, 4 means choose a variable with greatest hscore in the selected clause, 5 means choose a variable with greatest hscore2 in the selected clause, 6 means choose a variable using Novelty heuristic, and 7 means choose a variable using Sparrow-like heuristic)
beta_hscore               "--beta_hscore "               i,log   (100, 1000000)   | (sel_var_break_tie_greedy %in% i(3) | sel_var_div %in% i(4))            # #set the value of parameter beta in hscore calculation
d_hscore                  "--d_hscore "                  i       (1, 15)          | (sel_var_break_tie_greedy %in% i(3) | sel_var_div %in% i(4))            # #set the value of parameter d in hscore calculation
gamma_hscore2             "--gamma_hscore2 "             i,log   (100, 1000000)   | (sel_var_break_tie_greedy %in% i(4) | sel_var_div %in% i(5))            # #set the value of parameter gamma in hscore2 calculation
prob_first_div            "--prob_first_div "            r,log   (0.001, 1.0)     | perform_first_div %in% r(1)                                             # #set the probability to perform the first diversification
prob_novelty              "--prob_novelty "              r       (0.0, 1.0)       | sel_var_div %in% r(6)                                                   # #set the probability in the Novelty heuristic
prob_pac                  "--prob_pac "                  r,log   (1e-05, 0.1)     | perform_pac %in% r(1)                                                   # #set the probability to perform PAC heuristic
sel_clause_weight_scheme  "--sel_clause_weight_scheme "  c       (1,2)            | perform_clause_weight %in% c(1)                                         # #decide which clause weight scheme would be used (1 means SWT scheme, and 2 means PAWS scheme)
sparrow_c1                "--sparrow_c1 "                r       (2.0, 10.0)      | sel_var_div %in% r(7)                                                   # #set the c1 parameter in the Sparrow-like heuristic
p_swt                     "--p_swt "                     r       (0.0, 1.0)       | (perform_clause_weight %in% r(1) & sel_clause_weight_scheme %in% r(1))  # #set the value of parameter p in SWT scheme
q_swt                     "--q_swt "                     r       (0.0, 1.0)       | (perform_clause_weight %in% r(1) & sel_clause_weight_scheme %in% r(1))  # #set the value of parameter q in SWT scheme
sp_paws                   "--sp_paws "                   r       (0.5, 1.0)       | (perform_clause_weight %in% r(1) & sel_clause_weight_scheme %in% r(2))  # #set the value of parameter sp in PAWS scheme
sparrow_c2                "--sparrow_c2 "                i       (1, 5)           | sparrow_c1 > 3.0                                                        # #set the c2 parameter in the Sparrow-like heuristic
threshold_swt             "--threshold_swt "             i       (10, 1000)       | (perform_clause_weight %in% i(1) & sel_clause_weight_scheme %in% i(1))  # #set the value of parameter threshold in SWT scheme
sparrow_c3                "--sparrow_c3 "                i       (20000, 100000)  | (sparrow_c1 != 10.0 & sparrow_c2 > 2)                                   # #set the c3 parameter in the Sparrow-like heuristic

[forbidden]
(sel_clause_div == '2' & perform_clause_weight == '0')

[global]
digits=5