#!/bin/env python3 
"""Sparkle: A PbO-based Multi-agent Problem-solving Platform

usage: 
    sparkle [--version] [--help] [COMMAND] [ARGS...]

options:
   -h, --help   Show this help 
   --version    Show version

The Sparkle commands are:
   init         Create bare or cloned Sparkle workspace
   instance     Manage the instances of the workspace
   solver       Manage, run and configure solvers
   feature      Manage and run feature extractors
   portfolio    Create and run portfolio
   ablation     Run ablation calculation
   record       Load and save record
   report       Create report on calculations

See 'sparkle COMMAND --help' for more information on a specific command.
"""

"""Simple way to extract the commands from the usage description"""
def commands_from_doc(doc=__doc__):
    a = doc.find("commands are:\n") + 14
    b = doc.find("\n\n", a)
    return [s.split()[0] for s in doc[a:b].split("\n")]

# Python standard libs
from pathlib import Path
from subprocess import call

# Python libs
from docopt import docopt


if __name__ == "__main__":
    args = docopt(__doc__,
                  version="Sparkle version 1.2",
                  options_first=True)

    if args["COMMAND"] in commands_from_doc():
        # Creating a argv for the command
        argv = [args["COMMAND"]] + args["ARGS"]
        # Where the executables are
        binpath = Path(__file__).parent.absolute()
        # Call the subcommand executable
        exit(call([str(binpath / f"sparkle-{args['COMMAND']}")] + argv))
    elif args["COMMAND"] is None:
        exit(__doc__)
    else:
        exit(f"Invalid '{args['COMMAND']}' command. See 'sparkle --help'.")
