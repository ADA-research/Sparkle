SMAC (http://www.cs.ubc.ca/labs/beta/Projects/SMAC/) is an automatic configurator that allows users to automatically tune algorithm configuration spaces.

  Basic Usage:
  smac --scenario-file <file> 

  Skipping Validation:
  smac --scenario-file <file> --validation false

  Linux/Mac OS X/Windows Example:
  ./smac --scenario-file ./example_scenarios/saps/saps-scenario.txt

  Full version information is available with :
  smac -v

  A full command line reference is available with:
  smac --help

Please check the documentation to directory (doc/) for a manual.pdf, and the quickstart.pdf which will show you how to get up and running right away.

  See also:

  algo-test - for testing the wrapper
  smac-validate - for stand alone validation

Usage:

========== SMAC Options         ==========

	General Options for Running SMAC 
 
	 ====[ BASIC Options ]====

           --help, -?, /?, -h 
		show help

           --help-level 
		Show options at this level or lower
		Domain: {BASIC, INTERMEDIATE, ADVANCED, DEVELOPER}
		Default:                                    BASIC

           --validation, --doValidation 
		perform validation when SMAC completes
		Domain:                             {true, false}
		Default:                                     true

           -v, --version 
		print version and exit

	 ====[ INTERMEDIATE Options ]====

           --adaptive-capping, --ac, --adaptiveCapping 
		Use Adaptive Capping
		Domain:                             {true, false}
		Default: Defaults to true when --runObj is RUNTIME, false otherwise

           --always-run-initial-config, --alwaysRunInitialConfiguration 
		if true we will always run the default and switch back to it if it is better than the incumbent
		Domain:                             {true, false}
		Default:                                    false

           --console-log-level, --consoleLogLevel 
		default log level of console output (this cannot be more verbose than the logLevel)
		Domain:    {TRACE, DEBUG, INFO, WARN, ERROR, OFF}
		Default:                                     INFO

           --deterministic-instance-ordering, --deterministicInstanceOrdering 
		If true, instances will be selected from the instance list file in the specified order
		Domain:                             {true, false}
		Default:                                    false

           --exec-mode, --execution-mode, --executionMode 
		execution mode of the automatic configurator
		Domain:                        {SMAC, ROAR, PSEL}
		Default:                                     SMAC

           --experiment-dir, --experimentDir, -e 
		root directory for experiments Folder
		Default:              <current working directory>

           --initial-challenger-runs, --initialN, --initialChallenge 
		initial amount of runs to request when intensifying on a challenger
		Domain:                           (0, 2147483647]
		Default:                                        1

           --initial-challengers, --initialChallengers 
		Can be specified multiple times. Every item is one additional initial challenger which will be used to challenge the incumbent prior to starting the actual optimization method. For the syntax, please see --initialIncumbent.
		Default:                                       []

           --initial-incumbent, --initialIncumbent 
		Initial Incumbent to use for configuration (you can use RANDOM, or DEFAULT as a special string to get a RANDOM or the DEFAULT configuration as needed). Other configurations are specified as: -name 'value' -name 'value' ... For instance: --quick-sort 'on'
		Default:                                  DEFAULT

           --initial-incumbent-runs, --initialIncumbentRuns, --defaultConfigRuns 
		initial amount of runs to schedule against for the default configuration
		Domain:                           (0, 2147483647]
		Default:                                        1

           --log-level, --logLevel 
		messages will only be logged if they are of this severity or higher.
		Domain:    {TRACE, DEBUG, INFO, WARN, ERROR, OFF}
		Default:                                     INFO

           --num-run, --numrun, --numRun, --seed 
		number of this run (used for file generation, etc). This also controls the seed.
		Domain:                           [0, 2147483647]
		Default:                       Randomly generated

           --restore-scenario, --restoreScenario 
		Restore the scenario & state in the state folder
		Domain:                                     FILES
		Default:                                     null

           --rungroup, --rungroup-name, --runGroupName 
		name of subfolder of outputdir to save all the output files of this run to
		Default:                           %SCENARIO_NAME

           --save-runs-every-iteration 
		if true will save the runs and results file to disk every iteration. Useful if your runs are expensive and your cluster unreliable, not recommended if your runs are short as this may add an unacceptable amount of overhead
		Domain:                             {true, false}
		Default:                                    false

           --show-hidden, --showHiddenParameters 
		show hidden parameters that no one has use for, and probably just break SMAC (no-arguments)

           --validation-cores 
		Number of cores to use when validating (only applicable when using local command line cores). Essentially this changes the value of --cli-cores and --cores after SMAC has run. The use of this parameter is undefined if the TargetAlgorithmEvaluator being used is not the CLI
		Domain:                           (0, 2147483647]
		Default:                     The value of --cores

           --warmstart, --warmstart-from 
		location of state to use for warm-starting
		Default:      N/A (No state is being warmstarted)

	 ====[ ADVANCED Options ]====

           --ac-add-slack, --capAddSlack 
		amount to increase computed adaptive capping value of challengers by (post scaling)
		Domain:                             (0, Infinity)
		Default:                                      1.0

           --ac-mult-slack, --capSlack 
		amount to scale computed adaptive capping value of challengers by
		Domain:                             (0, Infinity)
		Default:                                      1.3

           --acq-func, --acquisition-function, --ei-func, --expected-improvement-function, --expectedImprovementFunction 
		acquisition function to use during local search, NOTE: The LCB acquisition function mu+k*sigma will have k sampled from an exponential distribution with mean 1.
		Domain:   {EXPONENTIAL, SIMPLE, LCB, EI, LCBEIRR}
		Default: EXPONENTIAL if minimizing runtime, EI otherwise.

           --clean-old-state-on-success, --cleanOldStateOnSuccess 
		will clean up much of the useless state files if smac completes successfully
		Domain:                             {true, false}
		Default:                                     true

           --config-tracking 
		Take measurements of configuration as it goes through it's lifecycle and write to file (in state folder)
		Domain:                             {true, false}

           --doubling-capping-challengers 
		Number of challengers to use with the doubling capping mechanism
		Domain:                           (0, 2147483647]
		Default:                                        2

           --doubling-capping-runs-per-challenger 
		Number of runs each challenger will get with the doubling capping initilization strategy
		Domain:                           (0, 2147483647]
		Default:                                        2

           --help-default-file, --helpDefaultsFile 
		file that contains default settings for SMAC
		Domain:                                     FILES
		Default:                        ~/.aeatk/help.opt

           --imputation-iterations, --imputationIterations 
		amount of times to impute censored data when building model
		Domain:                           [0, 2147483647]
		Default:                                        2

           --init-mode, --initialization-mode, --initMode, --initializationMode 
		Initialization Mode
		Domain: {CLASSIC, ITERATIVE_CAPPING, UNBIASED_TABLE}
		Default:                                  CLASSIC

           --initial-challengers-intensification-time, --initialChallengersIntensificationTime 
		Time to spend on intensify for the initial challengers.
		Default:                               2147483647

           --intensification-percentage, --intensificationPercentage, --frac_rawruntime 
		percent of time to spend intensifying versus model learning
		Domain:                                    (0, 1)
		Default:                                      0.5

           --intermediary-saves 
		determines whether to make any intermediary-saves or not (if false, no quick saves will be made either). The state will still be saved at the end of the run however
		Domain:                             {true, false}
		Default:                                     true

           --iterativeCappingBreakOnFirstCompletion 
		In Phase 2 of the initialization phase, we will abort the first time something completes and not look at anything else with the same kappa limits
		Domain:                             {true, false}
		Default:                                    false

           --iterativeCappingK 
		Iterative Capping K
		Default:                                        1

           --mask-censored-data-as-kappa-max, --maskCensoredDataAsKappaMax 
		Mask censored data as kappa Max
		Domain:                             {true, false}
		Default:                                    false

           --mask-inactive-conditional-parameters-as-default-value, --maskInactiveConditionalParametersAsDefaultValue 
		build the model treating inactive conditional values as the default value
		Domain:                             {true, false}
		Default:                                     true

           --max-incumbent-runs, --maxIncumbentRuns, --maxRunsForIncumbent 
		maximum number of incumbent runs allowed
		Domain:                           (0, 2147483647]
		Default:                                     2000

           --num-challengers, --numChallengers, --numberOfChallengers 
		number of challengers needed for local search
		Domain:                           (0, 2147483647]
		Default:                                       10

           --num-ei-random, --numEIRandomConfigs, --numberOfRandomConfigsInEI, --numRandomConfigsInEI, --numberOfEIRandomConfigs 
		number of random configurations to evaluate during EI search
		Domain:                           [0, 2147483647]
		Default:                                    10000

           --num-ls-random, --num-local-search-random 
		Number of random configurations that will be used as potential starting points for local search
		Domain:                           [0, 2147483647]
		Default:                                        0

           --num-pca, --numPCA 
		number of principal components features to use when building the model
		Domain:                           (0, 2147483647]
		Default:                                        7

           --option-file, --optionFile 
		read options from file
		Domain:                                     FILES

           --option-file2, --optionFile2, --secondaryOptionsFile 
		read options from file
		Domain:                                     FILES

           --print-rungroup-replacement-and-exit 
		print all the possible replacements in the rungroup and then exit
		Domain:                             {true, false}
		Default:                                    false

           --quick-saves 
		determines whether to make quick saves or not
		Domain:                             {true, false}
		Default:                                     true

           --restore-iteration, --restoreStateIteration, --restoreIteration 
		iteration of the state to restore, use "AUTO" to automatically pick the last iteration
		Default:         N/A (No state is being restored)

           --restore-state-from, --restoreStateFrom 
		location of state to restore
		Default:         N/A (No state is being restored)

           --save-context, --saveContext, --saveContextWithState 
		saves some context with the state folder so that the data is mostly self-describing (Scenario, Instance File, Feature File, Param File are saved)
		Domain:                             {true, false}
		Default:                                     true

           --shared-model-mode, --share-model-mode, --shared-run-data, --share-run-data 
		If true the run data will be read from other runs in the output dir periodically (the runs need have a specific filename)
		Domain:                             {true, false}
		Default:                                    false

           --shared-model-mode-frequency, --share-model-mode-frequency, --shared-run-data-frequency, --share-run-data-frequency 
		How often to poll for new run data (in seconds)
		Domain:                           (0, 2147483647]
		Default:                              300 seconds

           --shared-model-mode-write-data, --write-json-data 
		If true we will write run data to a JSON file
		Domain:                             {true, false}
		Default:                                     true

           --smac-default-file, --smacDefaultsFile 
		file that contains default settings for SMAC
		Domain:                                     FILES
		Default:                        ~/.aeatk/smac.opt

           --state-deserializer, --stateDeserializer 
		determines the format of the files that store the saved state to restore
		Domain:                            {NULL, LEGACY}
		Default:                                   LEGACY

           --state-serializer, --stateSerializer 
		determines the format of the files to save the state in
		Domain:                            {NULL, LEGACY}
		Default:                                   LEGACY

           --treat-censored-data-as-uncensored, --treatCensoredDataAsUncensored 
		builds the model as-if the response values observed for cap values, were the correct ones [NOT RECOMMENDED]
		Domain:                             {true, false}
		Default:                                    false

           --unbiased-capping-challengers 
		Number of challengers we will consider during initialization
		Domain:                           (0, 2147483647]
		Default:                                        2

           --unbiased-capping-cpulimit 
		Amount of CPU Time to spend constructing table in initialization phase
		Domain:                           (0, 2147483647]
		Default:                                        0

           --unbiased-capping-runs-per-challenger 
		Number of runs we will consider during initalization per challenger
		Domain:                           (0, 2147483647]
		Default:                                        2

           --validation-seed 
		Seed to use for validating SMAC
		Default: 0 which should cause it to run exactly the same as the stand-alone utility.

           --warmstart-iteration 
		iteration of the state to use for warm-starting, use "AUTO" to automatically pick the last iteration
		Default:                 AUTO (if being restored)

	 ====[ DEVELOPER Options ]====

           --seed-offset, --seedOffset 
		offset of numRun to use from seed (this plus --numRun should be less than INTEGER_MAX)
		Default:                                        0

           --shared-model-mode-asymetric 
		If set to true, then (based on the order of the file names) we will only read from runs that are transitively 2N and 2N+1 from our ID. So for instance if there were 16 runs, 0-15, runs 8-15 would be independent. Run 4 would read from 8,9. Run 5 would read from 10,11. Run 2 would read from 4,5,8,9,10,11, etc...
		Domain:                             {true, false}
		Default:                                    false

           --shared-model-mode-default-handling 
		If set to USE_ALL then all runs of the default configuration will be used, If set to SKIP_FIRST_TWO then then first two runs (presumably the default) will not be read, If set to IGNORE_ALL then we will always ignore runs with the default configuration
		Domain:     {USE_ALL, SKIP_FIRST_TWO, IGNORE_ALL}
		Default:                                  USE_ALL

           --shared-model-mode-tae 
		If true and shared model mode is enabled, then we will also try and share run data at the TAE level
		Domain:                             {true, false}
		Default:                                     true

           -S 
		Sets specific seeds (by name) in the random pool (e.g. -SCONFIG=2 -SINSTANCE=4). To determine the actual names that will be used you should run the program with debug logging enabled, it should be output at the end.


========== Random Forest Options ==========

	Options used when building the Random Forests 
 
	 ====[ ADVANCED Options ]====

           --rf-full-tree-bootstrap, --fullTreeBootstrap 
		bootstrap all data points into trees
		Domain:                             {true, false}
		Default:                                    false

           --rf-ignore-conditionality, --ignoreConditionality 
		ignore conditionality for building the model
		Domain:                             {true, false}
		Default:                                    false

           --rf-impute-mean, --imputeMean 
		impute the mean value for the all censored data points
		Domain:                             {true, false}
		Default:                                    false

           --rf-log-model, --log-model, --logModel 
		store response values in log-normal form
		Domain:                             {true, false}
		Default: true if optimizing runtime, false if optimizing quality

           --rf-min-variance, --minVariance 
		minimum allowed variance
		Domain:                             (0, Infinity)
		Default:                                  1.0E-14

           --rf-num-trees, --num-trees, --numTrees, --nTrees, --numberOfTrees 
		number of trees to create in random forest
		Domain:                           (0, 2147483647]
		Default:                                       10

           --rf-penalize-imputed-values, --penalizeImputedValues 
		treat imputed values that fall above the cutoff time, and below the penalized max time, as the penalized max time
		Domain:                             {true, false}
		Default:                                    false

           --rf-ratio-features, --ratioFeatures 
		ratio of the number of features to consider when splitting a node
		Domain:                                    (0, 1]
		Default:                       0.8333333333333334

           --rf-shuffle-imputed-values, --shuffleImputedValues 
		shuffle imputed value predictions between trees
		Domain:                             {true, false}
		Default:                                    false

           --rf-split-min, --split-min, --splitMin 
		minimum number of elements needed to split a node
		Domain:                           [0, 2147483647]
		Default:                                       10

	 ====[ DEVELOPER Options ]====

           --rf-preprocess-marginal, preprocessMarginal 
		build random forest with preprocessed marginal
		Domain:                             {true, false}
		Default:                                     true

           --rf-store-data, --rf-store-data-in-leaves, --storeDataInLeaves 
		store full data in leaves of trees
		Domain:                             {true, false}
		Default:                                    false

           --rf-subsample-memory-percentage, --freeMemoryPecentageToSubsample 
		when free memory percentage drops below this percent we will apply the subsample percentage
		Domain:                                    (0, 1]
		Default:                                     0.25

           --rf-subsample-percentage, --subsamplePercentage 
		multiply the number of points used when building model by this value
		Domain:                                    (0, 1]
		Default:                                      0.9

           --rf-subsample-values-when-low-on-memory, --subsampleValuesWhenLowOnMemory, --subsampleValuesWhenLowMemory 
		subsample model input values when the amount of memory available drops below a certain threshold (see --subsampleValuesWhenLowMemory) (Not Tested)
		Domain:                             {true, false}
		Default:                                    false


========== Scenario Options     ==========

	Standard Scenario Options for use with SMAC. In general consider using the --scenarioFile directive to specify these parameters and Algorithm Execution Options 
 
	 ====[ BASIC Options ]====

           --feature-file, --instanceFeatureFile, --feature_file 
		file that contains the all the instances features

[R]        --instances, --instance-file, --instance-dir, --instanceFile, -i, --instance_file, --instance_seed_file 
		File or directory containing the instances to use for the scenario. If it's a file it must coform a specific format (see Instance File Format section of the manual), if it's a directory it you must also use the --instance-suffix option to restrict the match (unless all files have the same extension), and the instance list will be in sorted order.

[R]        --run-obj, --run-objective, --runObj, --run_obj 
		per target algorithm run objective type that we are minimizing
		Domain:                        {RUNTIME, QUALITY}

           --scenario-file, --scenarioFile, --scenario 
		scenario file
		Domain:                                     FILES

           --skip-features, --ignore-features 
		If true the feature file will be ignored (if the feature file is required, this will cause an error, as if it was not supplied
		Domain:                             {true, false}
		Default:                                    false

           --test-instances, --test-instance-file, --test-instance-dir, --testInstanceFile, --test_instance_file, --test_instance_seed_file 
		File or directory containing the instances to use for the scenario. If it's a file it must coform a specific format (see Instance File Format section of the manual), if it's directory you must also use the --test-instance-suffix option to restrict the match (unless all files have the same extension), , and the instance list will be in sorted order
		Default:                                     null

	 ====[ INTERMEDIATE Options ]====

           --instance-suffix, --instance-regex 
		A suffix that all instances must match when reading instances from a directory. You can optionally specify a (java) regular expression but be aware that it is suffix matched (internally we take this string and append a $ on it)
		Default:                                     null

           --intra-obj, --intra-instance-obj, --overall-obj, --intraInstanceObj, --overallObj, --overall_obj, --intra_instance_obj 
		objective function used to aggregate multiple runs for a single instance
		Domain:                  {MEAN, MEAN1000, MEAN10}
		Default: MEAN if --run-obj is QUALITY and MEAN10 if it is runtime

           --output-dir, --outputDirectory, --outdir 
		Output Directory
		Default:  <current working directory>/____-output

           --test-instance-suffix, --test-instance-regex 
		A suffix that all instances must match when reading instances from a directory. You can optionally specify a (java) regular expression but be aware that it is suffix matched (internally we take this string and append a $ on it)
		Default:                                     null

           --use-instances 
		If false skips reading the instances and just uses a dummy instance
		Domain:                             {true, false}
		Default:                                     true

	 ====[ ADVANCED Options ]====

           --check-instances-exist, --checkInstanceFilesExist 
		check if instances files exist on disk
		Domain:                             {true, false}
		Default:                                    false

           --inter-obj, --inter-instance-obj, --interInstanceObj, --inter_instance_obj 
		objective function used to aggregate over multiple instances (that have already been aggregated under the Intra-Instance Objective)
		Domain:                  {MEAN, MEAN1000, MEAN10}
		Default:                                     MEAN


========== Scenario Configuration Limit Options ==========

	Options that control how long the scenario will run for 
 
	 ====[ BASIC Options ]====

           --cputime-limit, --cputime_limit, --tunertime-limit, --tuner-timeout, --tunerTimeout 
		limits the total cpu time allowed between SMAC and the target algorithm runs during the automatic configuration phase
		Domain:                           [0, 2147483647]
		Default:                               2147483647

           --runcount-limit, --runcount_limit, --totalNumRunsLimit, --numRunsLimit, --numberOfRunsLimit 
		limits the total number of target algorithm runs allowed during the automatic configuration phase
		Domain:                  (0, 9223372036854775807]
		Default:                      9223372036854775807

           --wallclock-limit, --wallclock_limit, --runtime-limit, --runtimeLimit, --wallClockLimit 
		limits the total wall-clock time allowed during the automatic configuration phase
		Domain:                           (0, 2147483647]
		Default:                               2147483647

	 ====[ ADVANCED Options ]====

           --iteration-limit, --numIterations, --numberOfIterations 
		limits the number of iterations allowed during automatic configuration phase
		Domain:                           (0, 2147483647]
		Default:                               2147483647

           --max-norun-challenge-limit, --maxConsecutiveFailedChallengeIncumbent 
		if the parameter space is too small we may get to a point where we can make no new runs, detecting this condition is prohibitively expensive, and this heuristic controls the number of times we need to try a challenger and get no new runs before we give up
		Default:                                     1000

           --terminate-on-delete 
		Terminate the procedure if this file is deleted
		Default:                                     null

           --use-cpu-time-in-tunertime, --countSMACTimeAsTunerTime 
		include the CPU Time of SMAC as part of the tunerTimeout
		Domain:                             {true, false}
		Default:                                     true


========== Algorithm Execution Options ==========

	Options related to invoking the target algorithm 
 
	 ====[ BASIC Options ]====

           --algo-cutoff-time, --target-run-cputime-limit, --target_run_cputime_limit, --cutoff-time, --cutoffTime, --cutoff_time 
		CPU time limit for an individual target algorithm run
		Domain:                             (0, Infinity)
		Default:                   1.7976931348623157E308

           --algo-deterministic, --deterministic 
		treat the target algorithm as deterministic
		Domain:                             {true, false}
		Default:                                     true

[R]        --algo-exec, --algoExec, --algo 
		command string to execute algorithm with

[R]        --pcs-file, --param-file, -p, --paramFile, --paramfile 
		File containing algorithm parameter space information in PCS format (see Algorithm Parameter File in the Manual). You can specify "SINGLETON" to get a singleton configuration space or "NULL" to get a null one.

           -T 
		additional context needed for target algorithm execution (see TAE documentation for possible values, generally rare)
		Default:                                       {}

	 ====[ INTERMEDIATE Options ]====

           --algo-exec-dir, --exec-dir, --execDir, --execdir 
		working directory to execute algorithm in
		Default:                current working directory

	 ====[ ADVANCED Options ]====

           --continous-neighbours, --continuous-neighbors, --continuousNeighbours 
		Number of neighbours for continuous parameters
		Default:                                        4

	 ====[ DEVELOPER Options ]====

           --search-subspace, --searchSubspace 
		Only generate random and neighbouring configurations with these values. Specified in a "name=value,name=value,..." format (Overrides those set in file)
		Default:                                     null

           --search-subspace-file, --searchSubspaceFile 
		Only generate random and neighbouring configurations with these values. Specified each parameter on each own line with individual value
		Domain:                                     FILES
		Default:                                     null


========== Target Algorithm Evaluator Options ==========

	Options that describe and control the policy and mechanisms for algorithm execution 
 
	 ====[ INTERMEDIATE Options ]====

           --abort-on-crash, --abortOnCrash 
		treat algorithm crashes as an ABORT (Useful if algorithm should never CRASH). NOTE:  This only aborts if all retries fail.
		Domain:                             {true, false}
		Default:                                    false

           --abort-on-first-run-crash, --abortOnFirstRunCrash 
		if the first run of the algorithm CRASHED treat it as an ABORT, otherwise allow crashes.
		Domain:                             {true, false}
		Default:                                     true

           --bound-runs, --boundRuns 
		[DEPRECATED] (Use the option on the TAE instead if available) if true, permit only --cores number of runs to be evaluated concurrently.
		Domain:                             {true, false}
		Default:                                    false

           --check-sat-consistency, --checkSATConsistency 
		Ensure that runs on the same problem instance always return the same SAT/UNSAT result
		Domain:                             {true, false}
		Default:                                     true

           --check-sat-consistency-exception, --checkSATConsistencyException 
		Throw an exception if runs on the same problem instance disagree with respect to SAT/UNSAT
		Domain:                             {true, false}
		Default:                                     true

           --cores, --numConcurrentAlgoExecs, --maxConcurrentAlgoExecs, --numberOfConcurrentAlgoExecs 
		[DEPRECATED] (Use the TAE option instead if available) maximum number of concurrent target algorithm executions
		Default:                                        1

           --kill-run-exceeding-captime 
		Attempt to kill runs that exceed their captime by some amount
		Domain:                             {true, false}
		Default:                                     true

           --kill-run-exceeding-captime-factor 
		Attempt to kill the run that exceed their captime by this factor
		Domain:                             (1, Infinity)
		Default:                                     10.0

           --retry-crashed-count, --retryCrashedRunCount, --retryTargetAlgorithmRunCount 
		number of times to retry an algorithm run before reporting crashed (NOTE: The original crashes DO NOT count towards any time limits, they are in effect lost). Additionally this only retries CRASHED runs, not ABORT runs, this is by design as ABORT is only for cases when we shouldn't bother further runs
		Domain:                           [0, 2147483647]
		Default:                                        0

           --tae, --targetAlgorithmEvaluator 
		Target Algorithm Evaluator to use when making target algorithm calls
		Domain: {ANALYTIC, BLACKHOLE, CLI, CONSTANT, IPC, PRELOADED, RANDOM} 
		Default:                                      CLI

           --track-scheduled-runs 
		If true outputs a file in the output directory that outlines how many runs were being evaluated at any given time
		Domain:                             {true, false}
		Default:                                    false

           --verify-sat, --verify-SAT, --verifySAT 
		Checks SAT/UNSAT/UNKNOWN responses of algorithm with the value stored as instance specific information, logging an error if there is a discrepancy. The default value is auto-detected based on the value of the instance specific information of every problem instance. If every instance has an instance specific information in the following set {SAT, UNSAT, UNKNOWN, SATISFIABLE, UNSATISFIABLE}, this will be set to true, otherwise it will be false.
		Domain:                             {true, false}
		Default:          Auto detected (see description)

	 ====[ ADVANCED Options ]====

           --call-observer-before-completion 
		Ensure that the TAE observer is called on runs before completion
		Domain:                             {true, false}
		Default:                                     true

           --file-cache 
		If true runs will be either written or read from the specified input and output files. If directories are specified, then input will be from all files in the directory, and output will be to a new random file in the directory. Note: This cache is static, we do not re-read from the cache over time
		Domain:                             {true, false}
		Default:                                    false

           --file-cache-output 
		Where to write files from
		Default:              Current Directory/runcache/

           --file-cache-source 
		Where to read files from
		Default:              Current Directory/runcache/

           --filter-zero-cutoff-runs 
		If true runs that are requested with 0 cutoff will be internally completed as TIMEOUT.
		Domain:                             {true, false}
		Default:                                     true

           --log-requests-responses 
		If set to true all evaluation requests will be logged as they are submitted and completed
		Domain:                             {true, false}
		Default:                                    false

           --log-requests-responses-rc-only, --log-requests-responses-rc 
		If set to true we will only log the run configuration when a run completes
		Domain:                             {true, false}
		Default:                                    false

           --observer-walltime-delay 
		How long to wait for an update with runtime information, before we use the walltime. With the 5 seconds and an scale of 0.95, it means we will see 0,0,0,0...,4.95...
		Domain:                             (0, Infinity)
		Default:                                      5.0

           --observer-walltime-if-no-runtime 
		If true and the target algorithm doesn't update us with runtime information we report wallclock time
		Domain:                             {true, false}
		Default:                                     true

           --observer-walltime-scale 
		What factor of the walltime should we use as the runtime (generally recommended is the 0.95 times the number of cores)
		Domain:                             (0, Infinity)
		Default:                                     0.95

           --tae-default-file 
		file that contains default settings for Target Algorithm Evaluators
		Domain:                                     FILES
		Default:                         ~/.aeatk/tae.opt

           --track-scheduled-runs-resolution 
		We will bucket changes into this size
		Domain:                             (0, Infinity)
		Default:                                      1.0

           --transform-crashed-quality 
		If true we will transform the solution quality reported to the MAX(quality, --transform-crashed-quality-value).
		Domain:                             {true, false}
		Default:                                     true

           --transform-crashed-quality-value 
		The minimum quality value that a CRASHED run can have
		Default:                                    1.0E9

	 ====[ DEVELOPER Options ]====

           --cache-runs 
		If true we will cache runs internally, so that subsequent requests are not re-executed [EXPERIMENTAL]
		Domain:                             {true, false}
		Default:                                    false

           --cache-runs-debug 
		If true we will print the state of the cache every so often for debug purposes.
		Domain:                             {true, false}
		Default:                                    false

           --cache-runs-strictly-increasing-observer 
		If true then we will enforce that all runtimes seen externally always have strictly increasing times. (Internally if the run is restarted for some reason, the observed time may in fact go down).
		Domain:                             {true, false}
		Default:                                    false

           --check-for-unclean-shutdown 
		If true, we will try and detect an unclean shutdown of the Target Algorithm Evaluator
		Domain:                             {true, false}
		Default:                                     true

           --check-for-unique-runconfigs 
		Checks that all submitted Run Configs in a batch are unique
		Domain:                             {true, false}
		Default:                                     true

           --check-for-unique-runconfigs-exception 
		If true, we will throw an exception if duplicate run configurations are detected
		Domain:                             {true, false}
		Default:                                     true

           --check-result-order-consistent, --checkResultOrderConsistent 
		Check that the TAE is returning responses in the correct order
		Domain:                             {true, false}
		Default:                                    false

           --exception-on-prepost-command, --exceptionOnPrePostCommand 
		Throw an abort
		Domain:                             {true, false}

           --exit-on-failure 
		If true, when a failure is detected the process will try its best to shutdown, potentially not cleanly
		Domain:                             {true, false}
		Default:                                    false

           --file-cache-crash-on-cache-miss, --file-cache-crash-on-miss 
		Application will crash on cache miss, this is for debugging
		Domain:                             {true, false}
		Default:                                    false

           --kill-runs-on-file-delete 
		All runs will be forcibly killed if the file is deleted. This option may cause the application to enter an infinite loop if the file is deleted, so care is needed. As a rule, you need to set this and some other option to point to the same file, if there is another option, then the application will probably shutdown nicely, if not, then it will probably infinite loop.
		Default:                                     null

           --post-scenario-command, --postScenarioCommand, --post_cmd 
		Command that will run on shutdown

           --pre-scenario-command, --preScenarioCommand, --pre_cmd 
		Command that will run on startup

           --prepost-exec-dir, --prePostExecDir 
		Execution Directory for Pre/Post commands
		Domain:                  { readable directories }
		Default:                Current Working Directory

           --prepost-log-output, --logOutput 
		Log all the output from the pre and post commands
		Domain:                             {true, false}

           --run-hashcode-file, --runHashCodeFile 
		file containing a list of run hashes one per line: Each line should be: "Run Hash Codes: (Hash Code) After (n) runs". The number of runs in this file need not match the number of runs that we execute, this file only ensures that the sequences never diverge. Note the n is completely ignored so the order they are specified in is the order we expect the hash codes in this version. Finally note you can simply point this at a previous log and other lines will be disregarded
		Domain:                                     FILES

           --skip-outstanding-eval-tae 
		If set to true code, the TAE will not be wrapped by a decorator to support waiting for outstanding runs
		Domain:                             {true, false}
		Default:                                    false

           --tae-stop-processing-on-shutdown 
		If true, then once JVM Shutdown is triggered either within the application or externally all further requests will be silently dropped. This is recommended since otherwise applications may see unexpected results as the TAE may be unable to continue processing.
		Domain:                             {true, false}
		Default:                                     true

           --tae-warn-if-no-response-from-tae 
		If greater than 0, it is the number of seconds to wait for the TAE to respond before issuing a warning
		Domain:                           [0, 2147483647]
		Default:                                      120

           --use-dynamic-cutoffs 
		If true then we change all cutoffs to the maximum cutoff time and dynamically kill runs that exceed there cutoff time. This is useful because cache hits require the cutoff time to match
		Domain:                             {true, false}
		Default:                                    false


========== Transform Target Algorithm Evaluator Decorator Options ==========

	This Target Algorithm Evaluator Decorator allows you to transform the response value of the wrapper according to some rules. Expressions that can be used by exp4j (http://www.objecthunter.net/exp4j/), can be specified and will cause the returned runs to be transformed accordingly. The variables in the expression can be S which will be {-1 if the run was UNSAT, 1 if SAT, and 0 otherwise}, R which is the original reported runtime, Q which is the original reported quality, and C which was the requested cutoff time. Care should be taken when transforming values to obey wrapper semantics. If you don't know what you are doing, we recommend that SAT and UNSAT values should be kept in the range between 0 and cutoff, and the TIMEOUT value shouldn't be transformed at all. A very special thanks to the original author Alexandre Fr?chette. 
 
	 ====[ ADVANCED Options ]====

           --tae-transform 
		Set to true if you'd like to transform the result, if false the other transforms have no effect
		Domain:                             {true, false}
		Default:                                   false.

           --tae-transform-SAT-quality 
		Function to apply to an algorithm run's quality if result is SAT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-SAT-runtime 
		Function to apply to an algorithm run's runtime if result is SAT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-TIMEOUT-quality 
		Function to apply to an algorithm run's quality if result is TIMEOUT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-TIMEOUT-runtime 
		Function to apply to an algorithm run's runtime if result is TIMEOUT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-UNSAT-quality 
		Function to apply to an algorithm run's quality if result is UNSAT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-UNSAT-runtime 
		Function to apply to an algorithm run's runtime if result is UNSAT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-other-quality 
		Function to apply to an algorithm run's quality if result is not SAT, UNSAT or TIMEOUT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

           --tae-transform-other-runtime 
		Function to apply to an algorithm run's runtime if result is not SAT, UNSAT or TIMEOUT.
		Domain: Calculable string using a run's associated variables: S run result (SAT=1,UNSAT=-1,other=0), R runtime, Q quality, C cutoff.
		Default:                      Identity transform.

	 ====[ DEVELOPER Options ]====

           --tae-transform-valid-values-only 
		If the transformation of runtime results in a value that is too large, the cutoff time will be returned, and the result changed to TIMEOUT. If the result is too small it will be set to 0
		Domain:                             {true, false}
		Default:                                     true


========== Forking Target Algorithm Evaluator Decorator Options ==========

	This Target Algorithm Evaluator Decorator allows you to delegate some runs to another TAE, denoted the slave TAE. Several policies are implemented (or will be upon request/need). The first two duplicate the run on the slave, and the primary motivation is performance of very short runs, where overhead of dispatch to the primary might be surprisingly high. The next two (to be implemented), would allow some runs to simply done by the slave, either before the master or after the master. 
 
	 ====[ ADVANCED Options ]====

           --fork-to-tae 
		If not null, runs will also be submitted to this other TAE at the same time. The first TAE that returns an answer is used.
		Domain: {ANALYTIC, BLACKHOLE, CLI, CONSTANT, IPC, PRELOADED, RANDOM} 
		Default:          Forking of requests is disabled

           --fork-to-tae-duplicate-on-slave-quick-timeout 
		What timeout to use when the DUPLICATE_ON_SLAVE_QUICK policy.
		Domain:                           (0, 2147483647]
		Default:                                5 seconds

           --fork-to-tae-policy 
		Selects the policy that we will fork with. For instance DUPLICATE_ON_SLAVE will simply submit runs to the slave as well. DUPLICATE_ON_SLAVE_QUICK will submit the runs to the slave, but with a reduced cutoff time
		Domain: {DUPLICATE_ON_SLAVE, DUPLICATE_ON_SLAVE_QUICK}
		Default: Must be explicitly set if the forkToTAE is not null


========== Validation Options   ==========

	Options that control validation 
 
	 ====[ INTERMEDIATE Options ]====

           --max-timestamp, --maxTimestamp 
		maximimum relative timestamp in the trajectory file to configure against. -1 means auto-detect
		Domain:                      [0, Infinity) U {-1}
		Default:                              Auto Detect

           --min-timestamp, --minTimestamp 
		minimum relative timestamp in the trajectory file to configure against.
		Domain:                             [0, Infinity)
		Default:                                      0.0

           --num-validation-runs, --numValidationRuns, --numberOfValidationRuns 
		approximate number of validation runs to do
		Domain:                           [0, 2147483647]
		Default:                                        1

           --save-state-file, --saveStateFile 
		Save a state file consisting of all the runs we did
		Domain:                             {true, false}
		Default:                                    false

           --validate-by-wallclock-time, --validateByWallClockTime 
		Validate runs by wall-clock time
		Domain:                             {true, false}
		Default:                                     true

           --validate-only-if-tunertime-reached, --validateOnlyIfTunerTimeReached 
		If the walltime in the trajectory file hasn't hit this entry we won't bother validating
		Domain:                             [0, Infinity)
		Default:                                      0.0

           --validate-only-if-walltime-reached, --validateOnlyIfWallTimeReached 
		If the walltime in the trajectory file hasn't hit this entry we won't bother validating
		Domain:                             [0, Infinity)
		Default:                                      0.0

           --validate-only-last-incumbent, --validateOnlyLastIncumbent 
		validate only the last incumbent found
		Domain:                             {true, false}
		Default:                                     true

	 ====[ ADVANCED Options ]====

           --mult-factor, --multFactor 
		base of the geometric progression of timestamps to validate (for instance by default it is maxTimestamp, maxTimestamp/2, maxTimestamp/4,... whiletimestamp >= minTimestamp )
		Domain:                             (0, Infinity)
		Default:                                      2.0

           --output-file-suffix, --outputFileSuffix 
		Suffix to add to validation run files (for grouping)

           --validate-all, --validateAll 
		Validate every entry in the trajectory file (overrides other validation options)
		Domain:                             {true, false}
		Default:                                    false

           --validation-rounding-mode, --validationRoundingMode 
		selects whether to round the number of validation (to next multiple of numTestInstances
		Domain:                                {UP, NONE}
		Default:                                       UP

	 ====[ DEVELOPER Options ]====

           --num-seeds-per-test-instance, --numSeedsPerTestInstance, --numberOfSeedsPerTestInstance 
		Deprecated/Broken: number of test seeds to use per instance during validation
		Domain:                           (0, 2147483647]
		Default:                                     1000

           --num-test-instances, --numTestInstances, --numberOfTestInstances 
		Deprecated/Broken: Check results carefully: number of instances to test against (will execute min of this, and number of instances in test instance file). To disable validation in SMAC see the --doValidation option
		Domain:                           (0, 2147483647]
		Default:                               2147483647

           --validation-headers, --validationHeaders 
		put headers on output CSV files for validation
		Domain:                             {true, false}
		Default:                                     true


========== Analytic Target Algorithm Evaluator Options ==========

	This Target Algorithm Evaluator uses an analytic function to generate a runtime. Most of the function definitions come from Test functions for optimization needs, by Marcin Molga, Czes?aw Smutnicki (http://www.zsd.ict.pwr.wroc.pl/files/docs/functions.pdf). NOTE: Some functions have been shifted vertically so that there response values are always positive. 
 
	 ====[ ADVANCED Options ]====

           --analytic-function 
		Which analytic function to use
		Domain: {ZERO, ADD, CAMELBACK, BRANINS, SINEPLUSONE}
		Default:                                CAMELBACK

	 ====[ DEVELOPER Options ]====

           --analytic-observer-frequency 
		How often to notify observer of updates (in milli-seconds)
		Domain:                           (0, 2147483647]
		Default:                                      100

           --analytic-scale-simulate-delay 
		Divide the simulated delay by this value
		Domain:                             (0, Infinity)
		Default:                                      1.0

           --analytic-simulate-cores 
		If set to greater than 0, the TAE will serialize requests so that no more than these number will execute concurrently.
		Domain:                           [0, 2147483647]
		Default:                                        0

           --analytic-simulate-delay 
		If set to true the TAE will simulate the wallclock delay
		Domain:                             {true, false}
		Default:                                    false


========== Blackhole Target Algorithm Evaluator Options ==========

	This Target Algorithm Evaluator simply never returns any runs 
 
	 ====[ DEVELOPER Options ]====

           --blackhole-warnings 
		Suppress warning that is generated
		Domain:                             {true, false}
		Default:                                     true


========== Command Line Target Algorithm Evaluator Options ==========

	This Target Algorithm Evaluator executes commands via the command line and the standard wrapper interface.  
 
	 ====[ INTERMEDIATE Options ]====

           --cli-concurrent-execution 
		Whether to allow concurrent execution
		Domain:                             {true, false}
		Default:                                     true

           --cli-cores 
		Number of cores to use to execute runs. In other words the number of requests to run at a given time.
		Domain:                           (0, 2147483647]
		Default:                                        1

           --cli-log-all-call-strings, --log-all-call-strings, --logAllCallStrings 
		log every call string
		Domain:                             {true, false}
		Default:                                    false

           --cli-log-all-calls, --cli-log-all-call-strings-and-results, --log-all-calls, --log-all-call-strings-and-results 
		log all the call strings and result lines
		Domain:                             {true, false}
		Default:                                    false

           --cli-log-all-process-output, --log-all-process-output, --logAllProcessOutput 
		log all process output
		Domain:                             {true, false}
		Default:                                    false

           --cli-log-all-results, --cli-log-all-call-results, --log-all-call-results, --log-all-results 
		log all the result lines
		Domain:                             {true, false}
		Default:                                    false

	 ====[ ADVANCED Options ]====

           --cli-call-params-with-quotes 
		If true calls to the target algorithm will have parameters that are quoted "'3'" instead of "3". Older versions of the code passed arguments with '. This has been removed and will be deprecated in the future
		Domain:                             {true, false}
		Default:                                    false

           --cli-default-file 
		file that contains default settings for CLI Target Algorithm Evaluator (it is recommended that you use this file to set the kill commands)
		Domain:                                     FILES
		Default:                     ~/.aeatk/cli-tae.opt

           --cli-kill-by-environment-cmd 
		If not null, this script will be executed with three arguments, the first a key, the second a value, the third our best guess at a pid (-1 means we couldn't guess). They represent environment name and value, and the script should find every process with that name and value set and terminate it. Do not assume that the key is static as it may change based on existing environment variables. Example scripts may be available in example_scripts/env_kill/
		Default:                                     null

           --cli-listen-for-updates 
		If true will create a socket and set environment variables so that we can have updates of CPU time
		Domain:                             {true, false}
		Default:                                     true

           --cli-pg-force-kill-cmd 
		Command to execute to try and ask the process group to terminate nicely (generally a SIGKILL in Unix). Note %pid will be replaced with the PID we determine.
		Default:             bash -c "kill -s KILL -%pid"

           --cli-pg-nice-kill-cmd 
		Command to execute to try and ask the process group to terminate nicely (generally a SIGTERM in Unix). Note %pid will be replaced with the PID we determine.
		Default:             bash -c "kill -s TERM -%pid"

           --cli-proc-force-kill-cmd 
		Command to execute to try and ask the process to terminate nicely (generally a SIGTERM in Unix). Note %pid will be replaced with the PID we determine.
		Default:                        kill -s KILL %pid

           --cli-proc-nice-kill-cmd 
		Command to execute to try and ask the process to terminate nicely (generally a SIGTERM in Unix). Note %pid will be replaced with the PID we determine.
		Default:                        kill -s TERM %pid

	 ====[ DEVELOPER Options ]====

           --cli-observer-frequency 
		How often to notify observer of updates (in milli-seconds)
		Domain:                           (0, 2147483647]
		Default:                                      500


========== Constant Target Algorithm Evaluator Options ==========

	Parameters for the Constant Target Algorithm Evaluator 
 
	 ====[ DEVELOPER Options ]====

           --constant-additional-run-data 
		Additional Run Data to return

           --constant-run-length 
		Runlength to return
		Default:                                      0.0

           --constant-run-quality 
		Quality to return
		Default:                                      0.0

           --constant-run-result 
		Run Result To return
		Domain: {TIMEOUT, SAT, UNSAT, CRASHED, ABORT, RUNNING, KILLED}
		Default:                                      SAT

           --constant-runtime 
		Runtime to return
		Default:                                      1.0


========== Inter-Process Communication Target Algorithm Evaluator Options ==========

	This Target Algorithm Evaluator hands the requests off to another process. The current encoding mechanism is the same as on the command line, except that we do not specify the algo executable field. The current mechanism can only execute one request to the server at a time. A small code change would be required to handle the more general case, so please contact the developers if this is required.  
 
	 ====[ ADVANCED Options ]====

           --ipc-async-threads 
		Number of asynchronous threads to use
		Default: One more than the number of available processors

           --ipc-default-file 
		file that contains default settings for IPC Target Algorithm Evaluator (it is recommended that you use this file to set the kill commands)
		Domain:                                     FILES
		Default:                     ~/.aeatk/ipc-tae.opt

           --ipc-encoding 
		How the message is encoded
		Domain:         {CALL_STRING, JAVA_SERIALIZATION}
		Default:                              CALL_STRING

           --ipc-exec-on-start-up, --ipc-exec 
		This script will be executed on start up of the IPC TAE. A final argument will be appended which is the server port if our IPCMechanism is REVERSE_TCP
		Default:                                     null

           --ipc-exec-output 
		If true we will log all output from the script
		Domain:                             {true, false}
		Default:                                    false

           --ipc-local-port 
		Local server port for some kinds of IPC mechanisms (if 0, this will be automatically allocated by the operating system)
		Domain:                                 [1,65535]
		Default:                                        0

           --ipc-mechanism 
		Mechanism to use for IPC
		Domain:                   {UDP, TCP, REVERSE_TCP}
		Default:                                      UDP

           --ipc-remote-host 
		Remote Host for some kinds of IPC mechanisms
		Default:                                127.0.0.1

           --ipc-remote-port 
		Remote Port for some kinds of IPC mechanisms
		Domain:                                 [0,65535]
		Default:                                     5050

           --ipc-report-persistent 
		Whether the TAE should be treated as persistent, loosely a TAE is persistent if we could ask it for the same request later and it wouldn't have to redo the work from scratch.
		Domain:                             {true, false}
		Default:                                    false

           --ipc-reverse-tcp-pool-connections 
		If true we will pool all the connections instead of closing them
		Domain:                             {true, false}
		Default:                                    false

           --ipc-udp-packetsize 
		Remote Port for some kinds of IPC mechanisms
		Domain:                                 [0,65535]
		Default:                                     4096


========== Preloaded Response Target Algorithm Evaluator ==========

	Target Algorithm Evaluator that provides preloaded responses 
 
	 ====[ DEVELOPER Options ]====

           --preload-additional-run-data 
		Additional Run Data to return

           --preload-quality 
		Quality to return on all values
		Default:                                      0.0

           --preload-response-data, --preload-responseData 
		Preloaded Response Values in the format [{SAT,UNSAT,...}=x], where x is a runtime (e.g. [SAT=1],[UNSAT=1.1]...

           --preload-run-length, --preload-runLength 
		Runlength to return on all values
		Default:                                     -1.0


========== Random Target Algorithm Evaluator Options ==========

	This Target Algorithm Evaluator randomly generates responses from a uniform distribution 
 
	 ====[ DEVELOPER Options ]====

           --random-additional-run-data 
		Additional Run Data to return

           --random-max-response 
		The maximum runtime we will generate
		Domain:                             [0, Infinity)
		Default:                                     10.0

           --random-min-response 
		The minimum runtime we will generate (values less than 0.01 will be rounded up to 0.01)
		Domain:                             [0, Infinity)
		Default:                                      0.0

           --random-observer-frequency 
		How often to notify observer of updates (in milli-seconds)
		Domain:                           (0, 2147483647]
		Default:                                      500

           --random-sample-seed 
		Seed to use when generate random responses
		Default:             Current Time in Milliseconds

           --random-scale-simulate-delay 
		Divide the simulated delay by this value
		Domain:                             (0, Infinity)
		Default:                                      1.0

           --random-simulate-cores 
		If set to greater than 0, the TAE will serialize requests so that no more than these number will execute concurrently.
		Domain:                           [0, 2147483647]
		Default:                                        0

           --random-simulate-delay 
		If set to true the TAE will simulate the wallclock delay
		Domain:                             {true, false}
		Default:                                    false

           --random-trend-coefficient 
		The Nth sample will be drawn from Max(0,Uniform(min,max) + N*(trend-coefficient)) distribution. This allows you to have the response values increase or decrease over time.
		Default:                                      0.0


	[R] denotes a parameter is required
