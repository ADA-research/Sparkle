#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir),
# the same directory where target-evaluator is executed. Hence, you may
# need to copy extra files needed by the executable to this directory.
#
#
# PARAMETERS:
# $1 is the candidate number
# $2 is the instance id
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print nothing.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
error() {
    echo "`TZ=UTC date`: $0: error: $@"
    cat $tmpfile
    rm -f $tmpfile
    exit 1
}

tmpfile=$(mktemp)

EXE=~/bin/program
FIXED_PARAMS=""

CANDIDATE=$1
INSTANCEID=$2
SEED=$3
INSTANCE=$4
shift 4 || error "Not enough parameters"
CAND_PARAMS=$*

STDOUT=c${CANDIDATE}-${INSTANCEID}-${SEED}.stdout
STDERR=c${CANDIDATE}-${INSTANCEID}-${SEED}.stderr

# modify with the SLURM submission template
sbatch 1> $tmpfile <<EOF
#!/bin/bash
#SBATCH --job-name=irace-$PPID-$CANDIDATE-${INSTANCEID}-${SEED}
###SBATCH --output=test-$CANDIDATE-${INSTANCEID}-${SEED}.out
#SBATCH --time=0-5:00:00
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=8000
#SBATCH --partition=defq
module load shared slurm
module load intel/compiler/64/14.0/2013_sp1.1.106
#echo "Start!"
TMP=\$(mktemp -d)
srun $EXE ${FIXED_PARAMS} --input $INSTANCE ${CAND_PARAMS} 1> \$TMP/$STDOUT 2> \$TMP/$STDERR
RET=\$?
echo "OK" >& 2
mv \$TMP/* ./
rmdir -p \$TMP &> /dev/null
exit \$RET
EOF

rc=$?
if [[ $rc == 0 ]]; then
    JOBID=$(grep -o -e "Submitted batch job [^ ]\+" $tmpfile | cut -f4 -d ' ')
    if ! [[ "$JOBID" =~ ^[_-.@0-9A-Za-z]+$ ]] ; then
        error "$0: cannot parse jobID from the output of sbatch!"
    fi
    echo "$JOBID"
    rm -f $tmpfile
    exit $rc
else
    error "$0: sbatch failed!"
fi
